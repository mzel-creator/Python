// 1. Объяснить, почему код ниже даёт именно такие результаты ?

var a = 1, b = 1, c, d;
c = ++a; alert(c); // 2
d = b++; alert(d); // 1
c = (2 + ++a); alert(c); // 5
d = (2 + b++); alert(d); // 4
alert(a); // 3
alert(b); // 3

// 1.1. c = ++a; alert(c); // 2

/* Инкремент "++" применяется для краткости записи при увеличении значения переменной(операнда) на единицу.
В случае применения префиксной формы инкремента происходит сначала увеличение значения переменной(операнда)
на единицу, а затем ее вывод или дальнейшее применение в коде.В выражении присвоения значения переменной
"с" первоначально происходит увеличение значения переменной "а", после которого значение "а" становится
равным 2, а затем осуществляется вывод значения переменной "с" командой document.write. */

// 1.2. d = b++; alert(d); // 1

/* В случае применения постфиксной формы инкремента происходит сначала вывод значения переменной(операнда),
а затем ее увеличение на единицу с дальнейшим применением в коде. В выражении присвоения значения переменной
"d" первоначально происходит вывод переменной "b" командой document.write, а только затем увеличение значения
переменной "b" на единицу. */

// 1.3. c = (2 + ++a); alert(c); // 5

/* На основании пояснений выше, в выражении c = ++a; произошло увеличение значения переменной "а".В выражении
c = (2 + ++a); происходит дальнейшее увеличение значения переменной "а" на единицу(путем применения префиксного
инкремента), что дает значение "3", а затем ее сложение с числом "2", что дает конечное значение переменной "с"
равное "5". */

// 1.4. d = (2 + b++); alert(d); // 4

/* Также в выражении d = b++; , указанном выше произошло увеличение значение переменной "b".В выражении
d = (2 + b++); применяется первоначально увеличенная на единицу переменная "b", т.е.со значением "2", но в
данном выражении увеличение ее значения при использовании инкремента на происходит, т.к.инкремент применен в
постфиксной форме.Таким образом, происходит сложение числового значения "2" и переменной "b" со значением "2". */

// 1.5. alert(a); // 3

/* В выражениях, приведенных в условии: с = ++a; и c = (2 + ++a); - переменная "а" увеличилась пошагово (путем
двухкратного применения префиксных инкрементов) с первоначального значения "1" до значения "2" и, затем, до
значения "3". */

// 1.6. alert(b); // 3

/* То же самое произошло с переменной "b" в двух предшествующих выражениях: d = b++; и d = (2 + b++); - , 
но только с применением постфиксных инкрементов, что привело к увеличению ее значения до "3".Так как выражение 
alert(b) или document.write(b) стоят в самом конце всех преобразований значений рассматриваемой переменной, то 
разница между применением постфиксного или префиксного инкремента отсутствует. */

// 2. Объяснить, чему будет равен x в примере ниже?

var a = 2;
var x = 1 + (a *= 2);

/* Объяснение - ч будет равен 5. a *= 2 является оптимизированной записью от a = a * 2 (где произведение будет = 4),
на следующем этапе прибавляем 1 и получаем значение 5. */

// 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения.
// Затем написать скрипт, который работает по следующему принципу: 
// если a и b положительные, вывести их разность, 
// если a и b отрицательные, вывести их произведение,
// если a и b разных знаков, вывести их сумму.

var a = 10;
var b = 20;
if (a > 0 && b > 0)
    alert(a - b);
else if (a < 0 && b < 0)
    alert(a * b);
else
    alert(a + b);

// 4. Присвоить переменной a значение в промежутке от 0 до 15.
// С помощью оператора switch организовать вывод чисел от a до 15.

var a = 0;
switch (a) {
    case 0:
        console.log(++a);
    case 1:
        console.log(++a);
    case 2:
        console.log(++a);
    case 3:
        console.log(++a);
    case 4:
        console.log(++a);
    case 5:
        console.log(++a);
    case 6:
        console.log(++a);
    case 7:
        console.log(++a);
    case 8:
        console.log(++a);
    case 9:
        console.log(++a);
    case 10:
        console.log(++a);
    case 11:
        console.log(++a);
    case 12:
        console.log(++a);
    case 13:
        console.log(++a);
    case 14:
        console.log(++a);
    case 15:
        console.log();
}

// 5. Реализовать основные арифметические операции: сложение, вычитание, умножение, деление.
// Сделать их в виде функций с двумя параметрами.
// Обязательно использовать оператор return.

function summ(a, b) {
    return a + b;
}

function sub(a, b) {
    return a - b;
}

function mult(a, b) {
    return a * b;
}

function div(a, b) {
    return a / b;
}

console.log(summ(50, 25));

/* 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1,
arg2 – значения аргументов, operation – строка с названием операции.
В зависимости от переданного значения операции выполнить одну из арифметических операций, используя функции
из пункта 5, и вернуть полученное значение, используя switch. */

function mathOperation(arg1, arg2, operation) {
    var result = false;

    switch (operation) {
        case "summ":
            result = arg1 + arg2;
            break;
        case "sub":
            result = arg1 - arg2;
            break;
        case "mult":
            result = arg1 * arg2;
            break;
        case "div":
            result = arg1 / arg2;
            break;
    }
    return result;
}

console.log(mathOperation(50, 25, "div"));

// 7. (*) Сравнить null и 0 и своими словами объяснить результат.
/* 0 - это конкретное значение переменной, а Null используется чтобы показать отсутствие у переменной 
какого либо значения. */

/* 8. (*) С помощью рекурсии организовать функцию возведения числа в степень: function power(val, pow), 
где val – заданное число, pow – степень. */

function power(val, pow) {
    if (pow > 0) {
        return val * power(val, pow - 1);
    } else if (pow < 0) {
        return val * power(val, pow + 1);
    } else
        return 1;
}

console.log(power(12, 2));
